# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs

jobs: 
  Install:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - run: 
          name : Install npm
          command: | 
            cd ./js-package
            npm run test
            npm install
      - save_cache:
          paths: [js-package/node_modules]
          key: node_modules
  #
  Lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name : install hado Lint 
          command: | 
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
  
      - run:
          name : Hadolint 
          command: |
            hadolint Dockerfile --ignore DL3008 --ignore DL3016
           
  

  DeployInfra-VPC:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: VPC Deploy
          command: |   
               aws cloudformation deploy \
                --template-file ./AWS-cloudformation/Network.yml  \
                --stack-name vpc-capstone \
                --parameter-overrides "EnvironmentName=Capstone" \
                    "VpcCIDR=10.0.0.0/16" "PublicSubnet1CIDR=10.0.0.0/24" \
                    "PublicSubnet2CIDR=10.0.1.0/24" \
                    "PrivateSubnet1CIDR =10.0.2.0/24" \
                    "PrivateSubnet2CIDR=10.0.3.0/24"
  
  DeployInfra-Server:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name : Server Infra
          command: |
              aws cloudformation deploy \
                --template-file ./AWS-cloudformation/Server-infra.yml \
                --stack-name Server-Capstone \
                --parameter-overrides "EnvironmentName=Capstone"
      
      - run: 
          name: add ip to inventory.txt
          command: | 
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> Ansible/inventory.txt
            cat ./Ansible/inventory.txt
            
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text > Ansible/IP.txt

      - persist_to_workspace:
          root: Ansible
          paths:
            - inventory.txt
            - IP.txt
  configure-infrastructure:
    docker :
      - image : "python:3.7-alpine3.11"
    steps:
      - checkout
      - attach_workspace:
          at: Ansible


      


           


 
              
workflows:
  default:
    jobs:
      - Install
      - Lint:
          requires: [Install]
      - DeployInfra-VPC:
          requires: [Lint] 
      - DeployInfra-Server:
          requires: [DeployInfra-VPC]       
      
                
            

            
            
